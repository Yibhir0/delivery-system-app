services:
  frontend:
    container_name: frontend
    build:
      context: frontend/
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network
    environment:
      VITE_BACKEND_URL: ${VITE_BACKEND_URL}

  backend:
    container_name: backend
    hostname: backend
    build:
      context: backend/
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
      - /root/.m2
    networks:
      - app-network
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8080"]
        start_period: 20s
        interval: 5s
        retries: 10
        timeout: 5s
    environment:
      DB_URL: ${DB_URL}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      GEMINI_API: ${GEMINI_URL}?key=${GEMINI_API_KEY}

  postgres:
   container_name: postgres
   image: docker.io/library/postgres:alpine3.20
   hostname: postgres
   healthcheck:
     test: ["CMD-SHELL", "pg_isready -d $POSTGRES_DB -U $POSTGRES_USER"]
     start_period: 20s
     interval: 5s
     retries: 10
     timeout: 5s
   volumes:
     - ./postgresql:/var/lib/postgresql/data
   environment:
     POSTGRES_USER: ${POSTGRES_USER}
     POSTGRES_DB: ${POSTGRES_DB}
     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
   ports:
     - "5432:5432"
   networks:
     - app-network


networks:
  app-network:
    driver: bridge
